(()=>{"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var n,r=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class s extends e{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 person":this.project.people+" persons"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned.",this.element.querySelector("p").textContent=this.project.description}}r([t],s.prototype,"dragStartHandler",null),r([t],s.prototype,"dragEndHandler",null),function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(n||(n={}));class i{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class o extends class{constructor(){this.listeners=[]}addListeners(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getIstance(){return this.instance||(this.instance=new o),this.instance}addProject(e,t,r){const s=new i(Math.random().toString(),e,t,r,n.Active);this.projects.push(s),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const l=o.getIstance();var a=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class c extends e{constructor(e){super("project-list","app",!1,e+"-projects"),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"==e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");l.moveProject(t,"active"===this.type?n.Active:n.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),l.addListeners((e=>{const t=e.filter((e=>"active"===this.type?e.status===n.Active:e.status===n.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=this.type+"-project-list";this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(this.type+"-project-list").innerHTML="";for(const e of this.assignedProjects)new s(this.element.querySelector("ul").id,e)}}function d(e){const{value:t,required:n,minLength:r,maxLength:s,min:i,max:o}=e;let l=!0;return n&&(l=l&&0!==t.toString().trim().length),null!=r&&"string"==typeof t&&(l=l&&t.trim().length>r),null!=s&&"string"==typeof t&&(l=l&&t.trim().length<s),null!=i&&"number"==typeof t&&(l=l&&t>i),null!=o&&"number"==typeof t&&(l=l&&t<o),l}a([t],c.prototype,"dragOverHandler",null),a([t],c.prototype,"dropHandler",null),a([t],c.prototype,"dragLeaveHandler",null);class p extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInput=this.element.querySelector("#title"),this.descriptionInput=this.element.querySelector("#description"),this.peopleInput=this.element.querySelector("#people"),this.configure()}gatherUserInput(){const e=this.titleInput.value,t=this.descriptionInput.value,n=this.peopleInput.value,r={value:t,minLength:20,maxLength:300},s={value:+n,required:!0,min:1,max:10};if(d({value:e,required:!0,minLength:3,maxLength:12})&&d(r)&&d(s))throw new Error("Please make sure all fields are filled in correctly.");return[e,t,+n]}clearInputs(){this.titleInput.value="",this.descriptionInput.value="",this.peopleInput.value=""}submitHundler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;l.addProject(e,n,r),this.clearInputs()}}configure(){this.element.addEventListener("submit",this.submitHundler)}renderContent(){}}(function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)})([t],p.prototype,"submitHundler",null),new p,new c("active"),new c("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0LW1hbmFnZXIvLi9zcmMvQ29tcG9uZW50cy9CYXNlQ29tcG9uZW50LnRzIiwid2VicGFjazovL3Byb2plY3QtbWFuYWdlci8uL3NyYy9EZWNvcmF0b3JzL0F1dG9iaW5kLnRzIiwid2VicGFjazovL3Byb2plY3QtbWFuYWdlci8uL3NyYy9Nb2RlbHMvUHJvamVjdC50cyIsIndlYnBhY2s6Ly9wcm9qZWN0LW1hbmFnZXIvLi9zcmMvQ29tcG9uZW50cy9Qcm9qZWN0SXRlbS50cyIsIndlYnBhY2s6Ly9wcm9qZWN0LW1hbmFnZXIvLi9zcmMvU3RhdGUvUHJvamVjdFN0YXRlLnRzIiwid2VicGFjazovL3Byb2plY3QtbWFuYWdlci8uL3NyYy9Db21wb25lbnRzL1Byb2plY3RMaXN0LnRzIiwid2VicGFjazovL3Byb2plY3QtbWFuYWdlci8uL3NyYy9VdGlsL1ZhbGlkYXRpb24udHMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1tYW5hZ2VyLy4vc3JjL0NvbXBvbmVudHMvUHJvamVjdElucHV0LnRzIiwid2VicGFjazovL3Byb2plY3QtbWFuYWdlci8uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiQ29tcG9uZW50IiwidGVtcGxhdGVJZCIsImhvc3RFbGVtZW50SWQiLCJpbnNlcnRBdFN0YXJ0IiwibmV3RWxlbWVudElkIiwidGhpcyIsInRlbXBsYXRlRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJob3N0RWxlbWVudCIsImltcG9ydGVkSHRtbENvbnRlbnQiLCJpbXBvcnROb2RlIiwiY29udGVudCIsImVsZW1lbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImlkIiwiYXR0YWNoIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiYXV0b2JpbmQiLCJfIiwiXzIiLCJkZXNjcmlwdG9yIiwib3JpZ2luYWxNZXRob2QiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsImJpbmQiLCJQcm9qZWN0U3RhdHVzIiwiUHJvamVjdEl0ZW0iLCJob3N0SWQiLCJwcm9qZWN0Iiwic3VwZXIiLCJjb25maWd1cmUiLCJyZW5kZXJDb250ZW50IiwicGVvcGxlIiwiZXZlbnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiZWZmZWN0QWxsb3dlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcmFnU3RhcnRIYW5kbGVyIiwiZHJhZ0VuZEhhbmRsZXIiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJ0aXRsZSIsInBlcnNvbnMiLCJkZXNjcmlwdGlvbiIsIlByb2plY3QiLCJzdGF0dXMiLCJQcm9qZWN0U3RhdGUiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lckZuIiwicHVzaCIsInByb2plY3RzIiwiaW5zdGFuY2UiLCJudW1PZlBlb3BsZSIsIm5ld1Byb2plY3QiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJBY3RpdmUiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJwcm9qZWN0SWQiLCJuZXdTdGF0dXMiLCJmaW5kIiwicHJqIiwic2xpY2UiLCJwcm9qZWN0U3RhdGUiLCJnZXRJc3RhbmNlIiwiUHJvamVjdExpc3QiLCJ0eXBlIiwiYXNzaWduZWRQcm9qZWN0cyIsInR5cGVzIiwicHJldmVudERlZmF1bHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwcmpJZCIsImdldERhdGEiLCJtb3ZlUHJvamVjdCIsInJlbW92ZSIsImRyYWdPdmVySGFuZGxlciIsImRyb3BIYW5kbGVyIiwiZHJhZ0xlYXZlSGFuZGxlciIsImFkZExpc3RlbmVycyIsInJlbGV2YW50UHJvamVjdHMiLCJmaWx0ZXIiLCJyZW5kZXJQcm9qZWN0cyIsImxpc3RJZCIsInRvVXBwZXJDYXNlIiwiaW5uZXJIVE1MIiwicHJvSXRlbSIsInZhbGlkYXRlIiwidmFsaWRhdGFibGUiLCJyZXF1aXJlZCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsImlzVmFsaWQiLCJ0cmltIiwibGVuZ3RoIiwiUHJvamVjdElucHV0IiwidGl0bGVJbnB1dCIsImRlc2NyaXB0aW9uSW5wdXQiLCJwZW9wbGVJbnB1dCIsImVudGVyZWRUaXRsZSIsImVudGVyZWREZXNjcmlwdGlvbiIsImVudGVyZWRQZW9wbGUiLCJyZXN1bHREZXNjcmlwdGlvblZhbGlkYXRpb24iLCJyZXN1bHRQZW9wbGVWYWxpZGF0aW9uIiwiRXJyb3IiLCJlIiwidXNlcklucHV0IiwiZ2F0aGVyVXNlcklucHV0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVzYyIsImFkZFByb2plY3QiLCJjbGVhcklucHV0cyIsInN1Ym1pdEh1bmRsZXIiXSwibWFwcGluZ3MiOiJtQkFDTyxNQUFlQSxFQUlwQixZQUNFQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBQyxLQUFLQyxnQkFBa0JDLFNBQVNDLGVBQWVQLEdBQy9DSSxLQUFLSSxZQUFjRixTQUFTQyxlQUFlTixHQUMzQyxNQUFNUSxFQUFzQkgsU0FBU0ksV0FBV04sS0FBS0MsZ0JBQWdCTSxTQUFTLEdBQzlFUCxLQUFLUSxRQUFVSCxFQUFvQkksa0JBQ25DVixJQUFpQkMsS0FBS1EsUUFBUUUsR0FBS1gsR0FDbkNDLEtBQUtXLE9BQU9iLEdBRU4sT0FBT0EsR0FDYkUsS0FBS0ksWUFBWVEsc0JBQ2ZkLEVBQWdCLGFBQWUsWUFDL0JFLEtBQUtRLFVDbkJKLFNBQVNLLEVBQVNDLEVBQVFDLEVBQVlDLEdBQzNDLE1BQU1DLEVBQWlCRCxFQUFXRSxNQVFsQyxNQVB5QyxDQUN2Q0MsY0FBYyxFQUNkLE1BRUUsT0FEZ0JGLEVBQWVHLEtBQUtwQixRLElDTjlCcUIsRSxzVUNLTCxNQUFNQyxVQUFvQjNCLEVBVS9CLFlBQVk0QixFQUFnQkMsR0FDMUJDLE1BQU0saUJBQWtCRixHQUFRLEVBQU9DLEVBQVFkLElBQy9DVixLQUFLd0IsUUFBVUEsRUFDZnhCLEtBQUswQixZQUNMMUIsS0FBSzJCLGdCQVpQLGNBQ0UsT0FBNEIsSUFBeEIzQixLQUFLd0IsUUFBUUksT0FDUixXQUVHNUIsS0FBS3dCLFFBQVFJLE9BQWhCLFdBWVgsaUJBQWlCQyxHQUNmQSxFQUFNQyxhQUFjQyxRQUFRLGFBQWMvQixLQUFLd0IsUUFB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QWlCL0UsTUFDM0NtRixFQUFnQnJHLEtBQUtrRyxZQUFZaEYsTUFRakNvRixFQUEyQyxDQUMvQ3BGLE1BQU9rRixFQUNQWixVQUFXLEdBQ1hDLFVBQVcsS0FFUGMsRUFBc0MsQ0FDMUNyRixPQUFRbUYsRUFDUmQsVUFBVSxFQUNWRyxJQUFLLEVBQ0xDLElBQUssSUFHUCxHQUNHTixFQW5Cd0MsQ0FDekNuRSxNQUFPaUYsRUFDUFosVUFBVSxFQUNWQyxVQUFXLEVBQ1hDLFVBQVcsTUFnQlZKLEVBQVNpQixJQUNUakIsRUFBU2tCLEdBSVYsTUFBTSxJQUFJQyxNQUFNLHdEQUZoQixNQUFPLENBQUNMLEVBQWNDLEdBQXFCQyxHQU92QyxjQUNOckcsS0FBS2dHLFdBQVc5RSxNQUFRLEdBQ3hCbEIsS0FBS2lHLGlCQUFpQi9FLE1BQVEsR0FDOUJsQixLQUFLa0csWUFBWWhGLE1BQVEsR0FJbkIsY0FBY3VGLEdBQ3BCQSxFQUFFdEMsaUJBQ0YsTUFBTXVDLEVBQVkxRyxLQUFLMkcsa0JBQ3ZCLEdBQUlDLE1BQU1DLFFBQVFILEdBQVksQ0FDNUIsTUFBT3BFLEVBQU93RSxFQUFNbEYsR0FBVThFLEVBQzlCN0MsRUFBYWtELFdBQVd6RSxFQUFPd0UsRUFBTWxGLEdBQ3JDNUIsS0FBS2dILGVBSVQsWUFDRWhILEtBQUtRLFFBQVF5QixpQkFBaUIsU0FBVWpDLEtBQUtpSCxlQUUvQyxtQiwyVEFiQSxFQURDcEcsRyxrQ0MxREgsSUFBSWtGLEVBQ0osSUFBSWhDLEVBQVksVUFDaEIsSUFBSUEsRUFBWSxhIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbXBvbmVudCBCYXNlIENsYXNzXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnQ8VCBleHRlbmRzIEhUTUxFbGVtZW50LCBVIGV4dGVuZHMgSFRNTEVsZW1lbnQ+IHtcclxuICB0ZW1wbGF0ZUVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgaG9zdEVsZW1lbnQ6IFQ7XHJcbiAgZWxlbWVudDogVTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHRlbXBsYXRlSWQ6IHN0cmluZyxcclxuICAgIGhvc3RFbGVtZW50SWQ6IHN0cmluZyxcclxuICAgIGluc2VydEF0U3RhcnQ6IGJvb2xlYW4sXHJcbiAgICBuZXdFbGVtZW50SWQ/OiBzdHJpbmdcclxuICApIHtcclxuICAgIHRoaXMudGVtcGxhdGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGVJZCkhIGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLmhvc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaG9zdEVsZW1lbnRJZCkhIGFzIFQ7XHJcbiAgICBjb25zdCBpbXBvcnRlZEh0bWxDb250ZW50ID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlRWxlbWVudC5jb250ZW50LCB0cnVlKTtcclxuICAgIHRoaXMuZWxlbWVudCA9IGltcG9ydGVkSHRtbENvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQgYXMgVTtcclxuICAgIG5ld0VsZW1lbnRJZCAmJiAodGhpcy5lbGVtZW50LmlkID0gbmV3RWxlbWVudElkKTtcclxuICAgIHRoaXMuYXR0YWNoKGluc2VydEF0U3RhcnQpO1xyXG4gIH1cclxuICBwcml2YXRlIGF0dGFjaChpbnNlcnRBdFN0YXJ0OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmhvc3RFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcclxuICAgICAgaW5zZXJ0QXRTdGFydCA/ICdhZnRlcmJlZ2luJyA6ICdiZWZvcmVlbmQnLFxyXG4gICAgICB0aGlzLmVsZW1lbnRcclxuICAgICk7XHJcbiAgfVxyXG4gIGFic3RyYWN0IGNvbmZpZ3VyZSgpOiB2b2lkO1xyXG4gIGFic3RyYWN0IHJlbmRlckNvbnRlbnQoKTogdm9pZDtcclxufVxyXG4iLCIvLyBhdXRvYmluZCBkZWNvcmF0b3JcclxuLy8gYWRkICd0aGlzJyBrZXl3b3JkIGluc3RlYWQgb2YgdGhpcy5zdWJtaXRIdW5kbGVyKCkuYmluZCh0aGlzKVxyXG5leHBvcnQgZnVuY3Rpb24gYXV0b2JpbmQoXzogYW55LCBfMjogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcclxuICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgY29uc3QgYWRqRGVzY2lwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICBnZXQoKSB7XHJcbiAgICAgIGNvbnN0IGJvdW5kRm4gPSBvcmlnaW5hbE1ldGhvZC5iaW5kKHRoaXMpO1xyXG4gICAgICByZXR1cm4gYm91bmRGbjtcclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiBhZGpEZXNjaXB0b3I7XHJcbn1cclxuIiwiLy8gUHJvamVjdCBUeXBlXHJcbmV4cG9ydCBlbnVtIFByb2plY3RTdGF0dXMge1xyXG4gIEFjdGl2ZSxcclxuICBGaW5pc2hlZFxyXG59XHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBpZDogc3RyaW5nLFxyXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgIHB1YmxpYyBwZW9wbGU6IG51bWJlcixcclxuICAgIHB1YmxpYyBzdGF0dXM6IFByb2plY3RTdGF0dXNcclxuICApIHt9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9CYXNlQ29tcG9uZW50JztcclxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICcuLi9EZWNvcmF0b3JzL0F1dG9iaW5kJztcclxuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gJy4uL01vZGVscy9Qcm9qZWN0JztcclxuaW1wb3J0IHsgRHJhZ2dhYmxlIH0gZnJvbSAnLi4vTW9kZWxzL0RyYWdEcm9wJztcclxuXHJcbi8vIFByb2plY3QgSXRlbSBDbGFzc1xyXG5leHBvcnQgY2xhc3MgUHJvamVjdEl0ZW0gZXh0ZW5kcyBDb21wb25lbnQ8SFRNTFVMaXN0RWxlbWVudCwgSFRNTExJRWxlbWVudD4gaW1wbGVtZW50cyBEcmFnZ2FibGUge1xyXG4gIHByaXZhdGUgcHJvamVjdDogUHJvamVjdDtcclxuICBnZXQgcGVyc29ucygpIHtcclxuICAgIGlmICh0aGlzLnByb2plY3QucGVvcGxlID09PSAxKSB7XHJcbiAgICAgIHJldHVybiAnMSBwZXJzb24nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGAke3RoaXMucHJvamVjdC5wZW9wbGV9IHBlcnNvbnNgO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoaG9zdElkOiBzdHJpbmcsIHByb2plY3Q6IFByb2plY3QpIHtcclxuICAgIHN1cGVyKCdzaW5nbGUtcHJvamVjdCcsIGhvc3RJZCwgZmFsc2UsIHByb2plY3QuaWQpO1xyXG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcclxuICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuICB9XHJcblxyXG4gIEBhdXRvYmluZFxyXG4gIGRyYWdTdGFydEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCkge1xyXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyIS5zZXREYXRhKCd0ZXh0L3BsYWluJywgdGhpcy5wcm9qZWN0LmlkKTtcclxuICAgIGV2ZW50LmRhdGFUcmFuc2ZlciEuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcclxuICB9XHJcblxyXG4gIEBhdXRvYmluZFxyXG4gIGRyYWdFbmRIYW5kbGVyKF86IERyYWdFdmVudCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0RyYWdFbmQnKTtcclxuICB9XHJcblxyXG4gIGNvbmZpZ3VyZSgpIHtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmRyYWdTdGFydEhhbmRsZXIpO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLmRyYWdFbmRIYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckNvbnRlbnQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignaDInKSEudGV4dENvbnRlbnQgPSB0aGlzLnByb2plY3QudGl0bGU7XHJcbiAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignaDMnKSEudGV4dENvbnRlbnQgPSB0aGlzLnBlcnNvbnMgKyAnIGFzc2lnbmVkLic7XHJcbiAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcigncCcpIS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC5kZXNjcmlwdGlvbjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvamVjdCwgUHJvamVjdFN0YXR1cyB9IGZyb20gJy4uL01vZGVscy9Qcm9qZWN0JztcclxuXHJcbi8vIFByb2plY3QgU3RhdGUgTWFuYWdlbWVudFxyXG50eXBlIExpc3RlbmVyPFQ+ID0gKGl0ZW1zOiBUW10pID0+IHZvaWQ7XHJcblxyXG5jbGFzcyBTdGF0ZTxUPiB7XHJcbiAgcHJvdGVjdGVkIGxpc3RlbmVyczogTGlzdGVuZXI8VD5bXSA9IFtdO1xyXG4gIGFkZExpc3RlbmVycyhsaXN0ZW5lckZuOiBMaXN0ZW5lcjxUPikge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lckZuKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0U3RhdGUgZXh0ZW5kcyBTdGF0ZTxQcm9qZWN0PiB7XHJcbiAgcHJpdmF0ZSBwcm9qZWN0czogUHJvamVjdFtdID0gW107XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByb2plY3RTdGF0ZTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SXN0YW5jZSgpIHtcclxuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBQcm9qZWN0U3RhdGUoKTtcclxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgYWRkUHJvamVjdCh0aXRsZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBudW1PZlBlb3BsZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QoXHJcbiAgICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKSxcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICBudW1PZlBlb3BsZSxcclxuICAgICAgUHJvamVjdFN0YXR1cy5BY3RpdmVcclxuICAgICk7XHJcbiAgICB0aGlzLnByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XHJcbiAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgbW92ZVByb2plY3QocHJvamVjdElkOiBzdHJpbmcsIG5ld1N0YXR1czogUHJvamVjdFN0YXR1cykge1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHRoaXMucHJvamVjdHMuZmluZChwcmogPT4gcHJqLmlkID09PSBwcm9qZWN0SWQpO1xyXG4gICAgaWYgKHByb2plY3QgJiYgcHJvamVjdC5zdGF0dXMgIT09IG5ld1N0YXR1cykge1xyXG4gICAgICBwcm9qZWN0LnN0YXR1cyA9IG5ld1N0YXR1cztcclxuICAgICAgdGhpcy51cGRhdGVMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlTGlzdGVuZXJzKCkge1xyXG4gICAgZm9yIChjb25zdCBsaXN0ZW5lckZuIG9mIHRoaXMubGlzdGVuZXJzKSB7XHJcbiAgICAgIGxpc3RlbmVyRm4odGhpcy5wcm9qZWN0cy5zbGljZSgpKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwcm9qZWN0U3RhdGUgPSBQcm9qZWN0U3RhdGUuZ2V0SXN0YW5jZSgpO1xyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL0Jhc2VDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcm9qZWN0SXRlbSB9IGZyb20gJy4uL0NvbXBvbmVudHMvUHJvamVjdEl0ZW0nO1xyXG5pbXBvcnQgeyBhdXRvYmluZCBhcyBBdXRvYmluZCB9IGZyb20gJy4uL0RlY29yYXRvcnMvQXV0b2JpbmQnO1xyXG5pbXBvcnQgKiBhcyBQcm9qZWN0IGZyb20gJy4uL01vZGVscy9Qcm9qZWN0JztcclxuaW1wb3J0IHsgRHJhZ1RhcmdldCB9IGZyb20gJy4uL01vZGVscy9EcmFnRHJvcCc7XHJcbmltcG9ydCB7IHByb2plY3RTdGF0ZSB9IGZyb20gJy4uL1N0YXRlL1Byb2plY3RTdGF0ZSc7XHJcblxyXG4vLyBQcm9qZWN0IExpc3QgQ2xhc3NcclxuZXhwb3J0IGNsYXNzIFByb2plY3RMaXN0IGV4dGVuZHMgQ29tcG9uZW50PEhUTUxEaXZFbGVtZW50LCBIVE1MRWxlbWVudD4gaW1wbGVtZW50cyBEcmFnVGFyZ2V0IHtcclxuICBhc3NpZ25lZFByb2plY3RzOiBQcm9qZWN0LlByb2plY3RbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0eXBlOiAnYWN0aXZlJyB8ICdmaW5pc2hlZCcpIHtcclxuICAgIHN1cGVyKCdwcm9qZWN0LWxpc3QnLCAnYXBwJywgZmFsc2UsIGAke3R5cGV9LXByb2plY3RzYCk7XHJcbiAgICB0aGlzLmFzc2lnbmVkUHJvamVjdHMgPSBbXTtcclxuICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuICB9XHJcblxyXG4gIEBBdXRvYmluZFxyXG4gIGRyYWdPdmVySGFuZGxlcihldmVudDogRHJhZ0V2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICYmIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PSAndGV4dC9wbGFpbicpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbiAgICAgIGxpc3RFbC5jbGFzc0xpc3QuYWRkKCdkcm9wcGFibGUnKTtcclxuICAgIH1cclxuICB9XHJcbiAgQEF1dG9iaW5kXHJcbiAgZHJvcEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCkge1xyXG4gICAgY29uc3QgcHJqSWQgPSBldmVudC5kYXRhVHJhbnNmZXIhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcclxuICAgIHByb2plY3RTdGF0ZS5tb3ZlUHJvamVjdChcclxuICAgICAgcHJqSWQsXHJcbiAgICAgIHRoaXMudHlwZSA9PT0gJ2FjdGl2ZScgPyBQcm9qZWN0LlByb2plY3RTdGF0dXMuQWN0aXZlIDogUHJvamVjdC5Qcm9qZWN0U3RhdHVzLkZpbmlzaGVkXHJcbiAgICApO1xyXG4gIH1cclxuICBAQXV0b2JpbmRcclxuICBkcmFnTGVhdmVIYW5kbGVyKF86IERyYWdFdmVudCkge1xyXG4gICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbiAgICBsaXN0RWwuY2xhc3NMaXN0LnJlbW92ZSgnZHJvcHBhYmxlJyk7XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLmRyYWdPdmVySGFuZGxlcik7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuZHJvcEhhbmRsZXIpO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIHRoaXMuZHJhZ0xlYXZlSGFuZGxlcik7XHJcblxyXG4gICAgcHJvamVjdFN0YXRlLmFkZExpc3RlbmVycygocHJvamVjdHM6IFByb2plY3QuUHJvamVjdFtdKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlbGV2YW50UHJvamVjdHMgPSBwcm9qZWN0cy5maWx0ZXIocHJvamVjdCA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2FjdGl2ZScpIHtcclxuICAgICAgICAgIHJldHVybiBwcm9qZWN0LnN0YXR1cyA9PT0gUHJvamVjdC5Qcm9qZWN0U3RhdHVzLkFjdGl2ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHByb2plY3Quc3RhdHVzID09PSBQcm9qZWN0LlByb2plY3RTdGF0dXMuRmluaXNoZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5hc3NpZ25lZFByb2plY3RzID0gcmVsZXZhbnRQcm9qZWN0cztcclxuICAgICAgdGhpcy5yZW5kZXJQcm9qZWN0cygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJDb250ZW50KCkge1xyXG4gICAgY29uc3QgbGlzdElkID0gYCR7dGhpcy50eXBlfS1wcm9qZWN0LWxpc3RgO1xyXG4gICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhLmlkID0gbGlzdElkO1xyXG4gICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2gyJykhLnRleHRDb250ZW50ID0gdGhpcy50eXBlLnRvVXBwZXJDYXNlKCkgKyAnIFBST0pFQ1RTJztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyUHJvamVjdHMoKSB7XHJcbiAgICBjb25zdCBsaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnR5cGV9LXByb2plY3QtbGlzdGApISBhcyBIVE1MVUxpc3RFbGVtZW50O1xyXG4gICAgbGlzdEVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgZm9yIChjb25zdCBwcm9JdGVtIG9mIHRoaXMuYXNzaWduZWRQcm9qZWN0cykge1xyXG4gICAgICBuZXcgUHJvamVjdEl0ZW0odGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhLmlkLCBwcm9JdGVtKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gSW5wdXRzIFZhbGlkYXRvclxyXG5leHBvcnQgaW50ZXJmYWNlIHZhbGlkYXRhYmxlIHtcclxuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xyXG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcclxuICBtaW5MZW5ndGg/OiBudW1iZXI7XHJcbiAgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG4gIG1pbj86IG51bWJlcjtcclxuICBtYXg/OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbGlkYXRhYmxlOiB2YWxpZGF0YWJsZSkge1xyXG4gIGNvbnN0IHsgdmFsdWUsIHJlcXVpcmVkLCBtaW5MZW5ndGgsIG1heExlbmd0aCwgbWluLCBtYXggfSA9IHZhbGlkYXRhYmxlO1xyXG4gIGxldCBpc1ZhbGlkID0gdHJ1ZTtcclxuICBpZiAocmVxdWlyZWQpIHtcclxuICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbHVlLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCAhPT0gMDtcclxuICB9XHJcbiAgaWYgKG1pbkxlbmd0aCAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbHVlLnRyaW0oKS5sZW5ndGggPiBtaW5MZW5ndGg7XHJcbiAgfVxyXG4gIGlmIChtYXhMZW5ndGggIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWx1ZS50cmltKCkubGVuZ3RoIDwgbWF4TGVuZ3RoO1xyXG4gIH1cclxuICBpZiAobWluICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsdWUgPiBtaW47XHJcbiAgfVxyXG4gIGlmIChtYXggIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWx1ZSA8IG1heDtcclxuICB9XHJcbiAgcmV0dXJuIGlzVmFsaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9CYXNlQ29tcG9uZW50JztcclxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICcuLi9EZWNvcmF0b3JzL0F1dG9iaW5kJztcclxuaW1wb3J0IHsgdmFsaWRhdGFibGUsIHZhbGlkYXRlIH0gZnJvbSAnLi4vVXRpbC9WYWxpZGF0aW9uJztcclxuaW1wb3J0IHsgcHJvamVjdFN0YXRlIH0gZnJvbSAnLi4vU3RhdGUvUHJvamVjdFN0YXRlJztcclxuXHJcbi8vIFByb2plY3QgSW5wdXQgQ2xhc3NcclxuZXhwb3J0IGNsYXNzIFByb2plY3RJbnB1dCBleHRlbmRzIENvbXBvbmVudDxIVE1MRGl2RWxlbWVudCwgSFRNTEZvcm1FbGVtZW50PiB7XHJcbiAgdGl0bGVJbnB1dDogSFRNTElucHV0RWxlbWVudDtcclxuICBkZXNjcmlwdGlvbklucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIHBlb3BsZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdwcm9qZWN0LWlucHV0JywgJ2FwcCcsIHRydWUsICd1c2VyLWlucHV0Jyk7XHJcbiAgICB0aGlzLnRpdGxlSW5wdXQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignI3RpdGxlJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjZGVzY3JpcHRpb24nKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgdGhpcy5wZW9wbGVJbnB1dCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjcGVvcGxlJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIC8vIHJlcGxhY2UgdGhlIGFwcCBlbGVtZW50IHdpdGggdGhpcy5lbGVtZW50XHJcbiAgICB0aGlzLmNvbmZpZ3VyZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnYXRoZXJVc2VySW5wdXQoKTogW3N0cmluZywgc3RyaW5nLCBudW1iZXJdIHwgdm9pZCB7XHJcbiAgICBjb25zdCBlbnRlcmVkVGl0bGUgPSB0aGlzLnRpdGxlSW5wdXQudmFsdWU7XHJcbiAgICBjb25zdCBlbnRlcmVkRGVzY3JpcHRpb24gPSB0aGlzLmRlc2NyaXB0aW9uSW5wdXQudmFsdWU7XHJcbiAgICBjb25zdCBlbnRlcmVkUGVvcGxlID0gdGhpcy5wZW9wbGVJbnB1dC52YWx1ZTtcclxuXHJcbiAgICBjb25zdCByZXN1bHRUaXRsZVZhbGlkYXRpb246IHZhbGlkYXRhYmxlID0ge1xyXG4gICAgICB2YWx1ZTogZW50ZXJlZFRpdGxlLFxyXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgbWluTGVuZ3RoOiAzLFxyXG4gICAgICBtYXhMZW5ndGg6IDEyXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzdWx0RGVzY3JpcHRpb25WYWxpZGF0aW9uOiB2YWxpZGF0YWJsZSA9IHtcclxuICAgICAgdmFsdWU6IGVudGVyZWREZXNjcmlwdGlvbixcclxuICAgICAgbWluTGVuZ3RoOiAyMCxcclxuICAgICAgbWF4TGVuZ3RoOiAzMDBcclxuICAgIH07XHJcbiAgICBjb25zdCByZXN1bHRQZW9wbGVWYWxpZGF0aW9uOiB2YWxpZGF0YWJsZSA9IHtcclxuICAgICAgdmFsdWU6ICtlbnRlcmVkUGVvcGxlLFxyXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgbWluOiAxLFxyXG4gICAgICBtYXg6IDEwXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChcclxuICAgICAgIXZhbGlkYXRlKHJlc3VsdFRpdGxlVmFsaWRhdGlvbikgfHxcclxuICAgICAgIXZhbGlkYXRlKHJlc3VsdERlc2NyaXB0aW9uVmFsaWRhdGlvbikgfHxcclxuICAgICAgIXZhbGlkYXRlKHJlc3VsdFBlb3BsZVZhbGlkYXRpb24pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIFtlbnRlcmVkVGl0bGUsIGVudGVyZWREZXNjcmlwdGlvbiwgK2VudGVyZWRQZW9wbGVdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgbWFrZSBzdXJlIGFsbCBmaWVsZHMgYXJlIGZpbGxlZCBpbiBjb3JyZWN0bHkuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xlYXJJbnB1dHMoKSB7XHJcbiAgICB0aGlzLnRpdGxlSW5wdXQudmFsdWUgPSAnJztcclxuICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgdGhpcy5wZW9wbGVJbnB1dC52YWx1ZSA9ICcnO1xyXG4gIH1cclxuXHJcbiAgQGF1dG9iaW5kXHJcbiAgcHJpdmF0ZSBzdWJtaXRIdW5kbGVyKGU6IEV2ZW50KSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCB1c2VySW5wdXQgPSB0aGlzLmdhdGhlclVzZXJJbnB1dCgpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodXNlcklucHV0KSkge1xyXG4gICAgICBjb25zdCBbdGl0bGUsIGRlc2MsIHBlb3BsZV0gPSB1c2VySW5wdXQ7XHJcbiAgICAgIHByb2plY3RTdGF0ZS5hZGRQcm9qZWN0KHRpdGxlLCBkZXNjLCBwZW9wbGUpO1xyXG4gICAgICB0aGlzLmNsZWFySW5wdXRzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zdWJtaXRIdW5kbGVyKTtcclxuICB9XHJcbiAgcmVuZGVyQ29udGVudCgpIHt9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvamVjdExpc3QgfSBmcm9tICcuL0NvbXBvbmVudHMvUHJvamVjdExpc3QnO1xyXG5pbXBvcnQgeyBQcm9qZWN0SW5wdXQgfSBmcm9tICcuL0NvbXBvbmVudHMvUHJvamVjdElucHV0JztcclxuXHJcbm5ldyBQcm9qZWN0SW5wdXQoKTtcclxubmV3IFByb2plY3RMaXN0KCdhY3RpdmUnKTtcclxubmV3IFByb2plY3RMaXN0KCdmaW5pc2hlZCcpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9